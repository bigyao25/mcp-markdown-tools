name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: mcp-markdown-tools
            asset_name: mcp-markdown-tools-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: mcp-markdown-tools
            asset_name: mcp-markdown-tools-linux-aarch64
          
          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: mcp-markdown-tools
            asset_name: mcp-markdown-tools-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: mcp-markdown-tools
            asset_name: mcp-markdown-tools-macos-aarch64
          
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: mcp-markdown-tools.exe
            asset_name: mcp-markdown-tools-windows-x86_64.exe
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            artifact_name: mcp-markdown-tools.exe
            asset_name: mcp-markdown-tools-windows-aarch64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          # 添加 aarch64 架构的 OpenSSL 开发包
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y libssl-dev:arm64 pkg-config

      - name: Configure cross-compilation (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "[target.aarch64-unknown-linux-gnu]" >> ~/.cargo/config.toml
          echo "linker = \"aarch64-linux-gnu-gcc\"" >> ~/.cargo/config.toml
        env:
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          # 为 aarch64 交叉编译配置环境变量
          PKG_CONFIG_ALLOW_CROSS: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '1' || '' }}
          PKG_CONFIG_PATH: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu/pkgconfig' || '' }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            aarch64-linux-gnu-strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          else
            strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          fi

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # 尝试从CHANGELOG.md提取当前版本的更新内容
            awk '/^## \[${{ steps.version.outputs.VERSION }}\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.txt
            if [ ! -s release_notes.txt ]; then
              echo "Release ${{ steps.version.outputs.VERSION }}" > release_notes.txt
              echo "" >> release_notes.txt
              echo "See [CHANGELOG.md](CHANGELOG.md) for details." >> release_notes.txt
            fi
          else
            echo "Release ${{ steps.version.outputs.VERSION }}" > release_notes.txt
            echo "" >> release_notes.txt
            echo "Binary releases for multiple platforms and architectures." >> release_notes.txt
          fi

      - name: Create Release and Upload Assets
        run: |
          # 创建 Release
          gh release create ${{ steps.version.outputs.VERSION }} \
            --title "Release ${{ steps.version.outputs.VERSION }}" \
            --notes-file release_notes.txt \
            ${{ contains(steps.version.outputs.VERSION, '-') && '--prerelease' || '' }}
          
          # 上传所有文件
          for dir in artifacts/*/; do
            for file in "$dir"*; do
              if [ -f "$file" ]; then
                echo "Uploading $file"
                gh release upload ${{ steps.version.outputs.VERSION }} "$file" --clobber
              fi
            done
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
